name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  format-and-lint:
    name: Format and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Auto-format code
      run: cargo fmt --all
      
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy (no_std)
      run: cargo clippy --lib -- -D warnings
      
    - name: Run clippy (with std)
      run: cargo clippy --lib --features std -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: format-and-lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Build library (no_std)
      run: cargo build --lib --verbose
      
    - name: Build library (with std)
      run: cargo build --lib --features std --verbose
      
    - name: Run tests
      run: cargo test --lib --features std --verbose

  build-examples:
    name: Build Examples
    runs-on: ubuntu-latest
    needs: format-and-lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Build simple example
      run: |
        cargo build --example simple_threads --features std || echo "Examples need updating for new crate name"

  cross-platform:
    name: Cross Platform (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: format-and-lint
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-13  # Intel-based macOS runner
            target: x86_64-apple-darwin
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
      
    - name: Build (no_std)
      run: cargo build --lib --target ${{ matrix.target }} --verbose
      
    - name: Build (with std)
      run: cargo build --lib --features std --target ${{ matrix.target }} --verbose
      
    - name: Test
      run: cargo test --lib --features std --target ${{ matrix.target }} --verbose

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs: format-and-lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Build documentation
      run: cargo doc --lib --no-deps --features std
      
    - name: Check documentation warnings
      run: |
        cargo doc --lib --no-deps --features std 2>&1 | tee doc_output.txt
        if grep -q "warning" doc_output.txt; then
          echo "Documentation warnings found:"
          grep "warning" doc_output.txt
          exit 1
        fi